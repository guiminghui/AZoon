<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee 
        http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

   	<!-- 开启注解自动扫描 -->
	<context:component-scan base-package="io.gmh">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:druid.properties" />
	
	<import resource="spring-mybatis.xml"/>
    

	<!--  RetryLimitHashedCredentialsMatcher限制用户尝试登陆次数 -->
    <!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
    
	<bean id="credentialsMatcher" class="io.gmh.shiro.RetryLimitHashedCredentialsMatcher">
	     <constructor-arg ref="shiroCacheManager"/>
	</bean>
 	
    <!-- 自定义Realm -->
    <bean id="myRealm" class="io.gmh.shiro.MyRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
		<property name="cachingEnabled" value="true" />
    </bean>
    
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm" />
        <property name="cacheManager" ref="shiroCacheManager" />
    </bean>

    <!-- Shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/login.jsp" />
        <!-- 权限认证失败，则跳转到指定页面，如果就一个人登陆，就不需要权限了 -->
        <!-- <property name="unauthorizedUrl" value="/unauthorized.jsp" />  -->
        <property name="filters">  
            <map>  
                <!-- <entry key="authc" value-ref="formAuthenticationFilter"/>   -->
                <entry key="logout" value-ref="logoutFilter" />  
            </map>  
        </property>  
        <property name="filterChainDefinitions">  
            <ref bean="shiroFilterChainDefinitions"/>  
        </property>  
    </bean>
   	<bean name="shiroFilterChainDefinitions" class="java.lang.String">  
		<constructor-arg>  
    		<value>  
       		 /login=anon
      		 /admin/**=authc
   		 </value>  
		</constructor-arg> 
	</bean>
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">  
  		 <property name="redirectUrl" value="/login.jsp" />  
	</bean>  
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- 开启Shiro注解 -->
    <bean
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor" />
    <bean
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    
    
    <!--kaptcha验证码  -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">yes</prop>  
                        <prop key="kaptcha.border.color">105,179,90</prop> 
                        <prop key="kaptcha.noise.color">black</prop> 
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>  
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <prop key="kaptcha.textproducer.char.string">123456789</prop> 
                        <prop key="kaptcha.textproducer.char.space">5</prop>                           
                        <prop key="kaptcha.textproducer.font.color">blue</prop>  
                        <prop key="kaptcha.image.width">120</prop>  
                        <prop key="kaptcha.image.height">40</prop>  
                        <prop key="kaptcha.textproducer.font.size">28</prop> 
                        <prop key="kaptcha.textproducer.font.names">微软雅黑</prop> 
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>                          
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
    
    
</beans>